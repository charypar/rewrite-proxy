package crypto

import (
	"crypto/rsa"
	"math/big"
	"reflect"
	"testing"
)

func TestReadRSAPublicKey(t *testing.T) {
	modulus := big.NewInt(0)
	modulus.SetBytes([]byte{0xb7, 0xa1, 0x9e, 0x4a, 0xf, 0x38, 0xda, 0x9f, 0xe4, 0x55, 0xbb, 0xd5, 0xd9, 0x91, 0xc, 0xee, 0x7c, 0x6c, 0x90, 0x99, 0xb7, 0x71, 0xe2, 0x6, 0xd5, 0xde, 0xad, 0xed, 0x42, 0x37, 0xdf, 0x84, 0xcc, 0x1b, 0xb2, 0x5c, 0xcc, 0x93, 0x9c, 0xa0, 0x14, 0x94, 0xa0, 0xfa, 0x64, 0xc6, 0x42, 0xc9, 0xe5, 0x39, 0x86, 0xcf, 0xd7, 0x24, 0xa8, 0x84, 0xd8, 0xb2, 0xd, 0xff, 0x51, 0x66, 0x5f, 0xbf, 0xf, 0xe3, 0x27, 0xea, 0x2f, 0xa0, 0x6a, 0x88, 0xf2, 0x9b, 0xfe, 0x9e, 0xc1, 0x1f, 0x9f, 0xbd, 0x99, 0x73, 0xe0, 0xbe, 0xc1, 0x58, 0xa2, 0x7c, 0x62, 0xe3, 0xea, 0x88, 0xaa, 0x3f, 0x65, 0x47, 0xb6, 0x29, 0xdc, 0xbd, 0xaf, 0x4, 0xc3, 0x46, 0x4e, 0x9b, 0x9d, 0x75, 0xce, 0xf7, 0xa, 0x1e, 0xa6, 0x1d, 0x14, 0x94, 0x9a, 0x9a, 0x27, 0x2, 0x81, 0x77, 0x7d, 0x11, 0x95, 0x17, 0x83, 0x29, 0x46, 0x4c, 0xab, 0x93, 0xf4, 0xb8, 0x17, 0x6, 0x37, 0xad, 0xa7, 0x21, 0x93, 0x85, 0xa4, 0x75, 0xa9, 0xe0, 0x24, 0x65, 0x58, 0x43, 0xd9, 0x40, 0xdb, 0x60, 0x93, 0xd7, 0x62, 0xab, 0x29, 0x15, 0xa7, 0xc, 0xc5, 0xd7, 0xc1, 0xef, 0x2a, 0x9, 0xef, 0x2c, 0x35, 0x37, 0xad, 0x3b, 0x6c, 0xa8, 0xb3, 0x53, 0x2, 0x19, 0x4c, 0x2b, 0x32, 0x2c, 0xc8, 0x5a, 0x5a, 0xe4, 0xbe, 0xbd, 0x6d, 0x8a, 0xf6, 0xa6, 0xc3, 0xad, 0x53, 0xe7, 0x7, 0x5e, 0x59, 0x7, 0x25, 0xb2, 0xd2, 0x9f, 0x1d, 0x4c, 0x9f, 0x4d, 0xce, 0xc1, 0xad, 0xaa, 0x9e, 0xc, 0x15, 0x2d, 0x1f, 0x9d, 0x45, 0x67, 0xbf, 0x37, 0xb7, 0xb0, 0x49, 0x73, 0x11, 0xf3, 0xd3, 0x1f, 0x6e, 0xe8, 0x30, 0x7f, 0xb, 0x22, 0xc5, 0x63, 0x63, 0xd3, 0x89, 0x8, 0x1, 0xf2, 0xd2, 0xc1, 0xd0, 0x7c, 0x51, 0xff, 0xff, 0x3d, 0x83, 0x4b})

	tests := []struct {
		name    string
		pem     []byte
		want    *rsa.PublicKey
		wantErr bool
	}{
		{
			"not a PEM block",
			[]byte("sdasdfdf"),
			nil,
			true,
		},
		{
			"malformed PEM block",
			[]byte(`-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt6GeSg842p/kVbvV2ZEM
TJ9NzsGtqp4MFS0fnUVnvze3sElzEfPTH27oMH8LIsVjY9OJCAHy0sHQfFH//z2D
SwIDAQAB
-----END PUBLIC KEY-----`),
			nil,
			true,
		},
		{
			"valid RSA PEM block",
			[]byte(`-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt6GeSg842p/kVbvV2ZEM
7nxskJm3ceIG1d6t7UI334TMG7JczJOcoBSUoPpkxkLJ5TmGz9ckqITYsg3/UWZf
vw/jJ+ovoGqI8pv+nsEfn72Zc+C+wViifGLj6oiqP2VHtincva8Ew0ZOm511zvcK
HqYdFJSamicCgXd9EZUXgylGTKuT9LgXBjetpyGThaR1qeAkZVhD2UDbYJPXYqsp
FacMxdfB7yoJ7yw1N607bKizUwIZTCsyLMhaWuS+vW2K9qbDrVPnB15ZByWy0p8d
TJ9NzsGtqp4MFS0fnUVnvze3sElzEfPTH27oMH8LIsVjY9OJCAHy0sHQfFH//z2D
SwIDAQAB
-----END PUBLIC KEY-----`),
			&rsa.PublicKey{N: modulus, E: 65537},
			false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := ReadRSAPublicKey(tt.pem)
			if (err != nil) != tt.wantErr {
				t.Errorf("ReadRSAPublicKey() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("ReadRSAPublicKey() = %#v, want %v", got, tt.want)
			}
		})
	}
}

func TestReadRSAPrivateKey(t *testing.T) {
	exponent := big.NewInt(0)
	exponent.SetBytes([]byte{0x51, 0xb5, 0xde, 0xe3, 0x81, 0x86, 0x80, 0xf1, 0xe8, 0xfe, 0xa5, 0x48, 0x71, 0x39, 0x74, 0x11, 0xa2, 0xd8, 0x4, 0x38, 0x2, 0x42, 0xf0, 0x9a, 0xae, 0xc, 0x1a, 0x44, 0x9a, 0xd4, 0x95, 0xe7, 0x57, 0x93, 0x73, 0x78, 0x8b, 0xa7, 0x9b, 0x68, 0x38, 0x0, 0x32, 0xe9, 0x78, 0x72, 0x28, 0x42, 0x2, 0x77, 0xe8, 0x9f, 0xf, 0x52, 0xc6, 0x91, 0xe6, 0x82, 0xc4, 0x6b, 0xb9, 0xe2, 0xdd, 0xf3, 0xfc, 0xb3, 0xcd, 0x8d, 0xd, 0x88, 0x4a, 0x1f, 0x8a, 0x25, 0x13, 0xd5, 0xbc, 0x85, 0xbf, 0xe4, 0xf4, 0x25, 0x75, 0xfa, 0x2b, 0xba, 0xaf, 0x2, 0xbe, 0x56, 0x40, 0x84, 0x73, 0x8d, 0x26, 0x1a, 0x14, 0xda, 0xe7, 0xd8, 0x97, 0xca, 0x7c, 0xc2, 0xa, 0x34, 0x80, 0x8a, 0x6d, 0x7f, 0xcb, 0xc6, 0xfb, 0x8f, 0xb1, 0x1a, 0xb6, 0xf8, 0xa5, 0x27, 0x1e, 0x48, 0xf7, 0x24, 0x1d, 0xbd, 0x8a, 0xa4, 0xd0, 0x13, 0x71, 0x70, 0x75, 0x26, 0xff, 0x52, 0x70, 0x5a, 0xf3, 0x29, 0x87, 0x13, 0x4a, 0xd8, 0xa1, 0xbc, 0x1a, 0xda, 0x2b, 0xaf, 0x6f, 0x32, 0xab, 0x6a, 0x76, 0x38, 0xbf, 0x1d, 0x4e, 0x2e, 0xa2, 0xe1, 0x4d, 0xb4, 0x1e, 0xb2, 0xca, 0xdd, 0xb5, 0x8d, 0xd9, 0xec, 0x55, 0xa1, 0xfb, 0x92, 0x81, 0x30, 0xdd, 0x97, 0x5d, 0x6, 0xc0, 0x29, 0x4e, 0x6e, 0x19, 0x2c, 0x6e, 0x60, 0xe3, 0xc8, 0x69, 0x2b, 0xf4, 0xa5, 0xa5, 0x3b, 0x48, 0x12, 0x6, 0xe9, 0x4e, 0x7e, 0xb1, 0x57, 0xa6, 0x24, 0x6a, 0x41, 0xa2, 0x4b, 0xb3, 0xaa, 0x59, 0x27, 0xcc, 0xc3, 0x88, 0x24, 0xfc, 0x5d, 0xec, 0xd9, 0xd9, 0xbb, 0xb4, 0x9, 0xd8, 0x12, 0x9, 0x5c, 0xef, 0x7e, 0x3f, 0xe5, 0x9b, 0xbb, 0xb0, 0x70, 0x4c, 0x9b, 0x45, 0x6c, 0x13, 0x82, 0x3d, 0x5e, 0x93, 0x96, 0xec, 0x2c, 0x1b, 0xf8, 0x42, 0x1})

	prime0 := big.NewInt(0)
	prime0.SetBytes([]byte{0xdf, 0x34, 0xad, 0xc6, 0x77, 0x1c, 0x3a, 0xbb, 0xf4, 0x2e, 0xd7, 0xe3, 0xfe, 0x85, 0x72, 0x7d, 0x8c, 0x44, 0xf7, 0xa6, 0xa8, 0xd5, 0xcd, 0x52, 0x29, 0x94, 0xce, 0x7, 0x8a, 0xf6, 0x3, 0x79, 0x75, 0x44, 0x98, 0xe8, 0xc, 0x37, 0xe6, 0x3e, 0x6a, 0xac, 0x59, 0xd, 0xc9, 0xd8, 0xb1, 0xfe, 0x66, 0xea, 0xae, 0xe6, 0x5b, 0xc0, 0xb5, 0x42, 0x9f, 0x14, 0xb9, 0xdf, 0x33, 0x29, 0x75, 0xfc, 0x98, 0x2e, 0x7a, 0xff, 0xfb, 0xd6, 0xbe, 0x2c, 0xcb, 0x90, 0xdb, 0xb3, 0x2b, 0x5d, 0xd3, 0x8e, 0x3, 0xc1, 0xf6, 0x4, 0xd6, 0x67, 0x27, 0x6f, 0xf7, 0xe7, 0x86, 0x97, 0x17, 0x8c, 0x73, 0x26, 0xaf, 0xe2, 0x8, 0xca, 0xfb, 0xae, 0x55, 0xad, 0xcb, 0x30, 0xc8, 0x93, 0x4f, 0xa6, 0x35, 0x96, 0x77, 0xee, 0x20, 0x95, 0xc0, 0xd4, 0xf5, 0x7d, 0xc7, 0x78, 0x18, 0xbb, 0x12, 0xc0, 0x5c, 0x81})

	prime1 := big.NewInt(0)
	prime1.SetBytes([]byte{0xdf, 0x34, 0xad, 0xc6, 0x77, 0x1c, 0x3a, 0xbb, 0xf4, 0x2e, 0xd7, 0xe3, 0xfe, 0x85, 0x72, 0x7d, 0x8c, 0x44, 0xf7, 0xa6, 0xa8, 0xd5, 0xcd, 0x52, 0x29, 0x94, 0xce, 0x7, 0x8a, 0xf6, 0x3, 0x79, 0x75, 0x44, 0x98, 0xe8, 0xc, 0x37, 0xe6, 0x3e, 0x6a, 0xac, 0x59, 0xd, 0xc9, 0xd8, 0xb1, 0xfe, 0x66, 0xea, 0xae, 0xe6, 0x5b, 0xc0, 0xb5, 0x42, 0x9f, 0x14, 0xb9, 0xdf, 0x33, 0x29, 0x75, 0xfc, 0x98, 0x2e, 0x7a, 0xff, 0xfb, 0xd6, 0xbe, 0x2c, 0xcb, 0x90, 0xdb, 0xb3, 0x2b, 0x5d, 0xd3, 0x8e, 0x3, 0xc1, 0xf6, 0x4, 0xd6, 0x67, 0x27, 0x6f, 0xf7, 0xe7, 0x86, 0x97, 0x17, 0x8c, 0x73, 0x26, 0xaf, 0xe2, 0x8, 0xca, 0xfb, 0xae, 0x55, 0xad, 0xcb, 0x30, 0xc8, 0x93, 0x4f, 0xa6, 0x35, 0x96, 0x77, 0xee, 0x20, 0x95, 0xc0, 0xd4, 0xf5, 0x7d, 0xc7, 0x78, 0x18, 0xbb, 0x12, 0xc0, 0x5c, 0x81})

	primes := []*big.Int{prime0, prime1}

	key := rsa.PrivateKey{D: exponent, Primes: primes}
	// key.Precompute()

	tests := []struct {
		name    string
		pem     []byte
		want    *rsa.PrivateKey
		wantErr bool
	}{
		{
			"not a PEM block",
			[]byte("sdasdfdf"),
			nil,
			true,
		},
		{
			"malformed PEM block",
			[]byte(`-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAt6GeSg842p/kVbvV2ZEM7nxskJm3ceIG1d6t7UI334TMG7Jc
zJOcoBSUoPpkxkLJ5TmGz9ckqITYsg3/UWZfvw/jJ+ovoGqI8pv+nsEfn72Zc+C+
wViifGLj6oiqP2VHtincva8Ew0ZOm511zvcKHqYdFJSamicCgXd9EZUXgylGTKuT
9LgXBjetpyGThaR1qeAkZVhD2UDbYJPXYqspFacMxdfB7yoJ7yw1N607bKizUwIZ
TCsyLMhaWuS+vW2K9qbDrVPnB15ZByWy0p8dTJ9NzsGtqp4MFS0fnUVnvze3sElz
etghAoGBAM9igw4mxe7UdfWAjFrApkk3htIs6LijoOa90T487+/dJ4hX6ITr1DEZ
ckj17AAPMwtqmRz2cLrywmS/+VF9c/SKJ1Rlj5DZii6jmqzlUma7v+dA3ABHFO0L
Rk4Dto8pfkOUSQpi/AIAl4nU/Bd8va1M4QwD9JU7lTBqXFEaEI6J
-----END RSA PRIVATE KEY-----`),
			nil,
			true,
		},
		{
			"valid RSA PEM block",
			[]byte(`-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAt6GeSg842p/kVbvV2ZEM7nxskJm3ceIG1d6t7UI334TMG7Jc
zJOcoBSUoPpkxkLJ5TmGz9ckqITYsg3/UWZfvw/jJ+ovoGqI8pv+nsEfn72Zc+C+
wViifGLj6oiqP2VHtincva8Ew0ZOm511zvcKHqYdFJSamicCgXd9EZUXgylGTKuT
9LgXBjetpyGThaR1qeAkZVhD2UDbYJPXYqspFacMxdfB7yoJ7yw1N607bKizUwIZ
TCsyLMhaWuS+vW2K9qbDrVPnB15ZByWy0p8dTJ9NzsGtqp4MFS0fnUVnvze3sElz
EfPTH27oMH8LIsVjY9OJCAHy0sHQfFH//z2DSwIDAQABAoIBAFG13uOBhoDx6P6l
SHE5dBGi2AQ4AkLwmq4MGkSa1JXnV5NzeIunm2g4ADLpeHIoQgJ36J8PUsaR5oLE
a7ni3fP8s82NDYhKH4olE9W8hb/k9CV1+iu6rwK+VkCEc40mGhTa59iXynzCCjSA
im1/y8b7j7EatvilJx5I9yQdvYqk0BNxcHUm/1JwWvMphxNK2KG8Gtorr28yq2p2
OL8dTi6i4U20HrLK3bWN2exVofuSgTDdl10GwClObhksbmDjyGkr9KWlO0gSBulO
frFXpiRqQaJLs6pZJ8zDiCT8XezZ2bu0CdgSCVzvfj/lm7uwcEybRWwTgj1ek5bs
LBv4QgECgYEA3zStxnccOrv0Ltfj/oVyfYxE96ao1c1SKZTOB4r2A3l1RJjoDDfm
PmqsWQ3J2LH+Zuqu5lvAtUKfFLnfMyl1/Jguev/71r4sy5Dbsytd044DwfYE1mcn
b/fnhpcXjHMmr+IIyvuuVa3LMMiTT6Y1lnfuIJXA1PV9x3gYuxLAXIECgYEA0pxy
Rv+EwE8cvBIKhh9pkrxi1DO3VYL39ZLxjbX630/hytbOawUd5wIf08mJ7fJDpypp
bJvXqkOggefuHEWgNzmLSEJeo68Q3sZayIIH7v3KxkEV1o+Q7TYV/hQG9ay85Eql
hqzFm+6aeJMPUue2Drdee0F0fGbNBloq834jqcsCgYBM5Ifs9AGMlk1TidooR26e
o6Dqs8Y8CUSBwJqNbKi9n6zvWcGu2978p6EB+McNWJwsdjKUdw1XJEFLUZD7vg/A
WejBRMhMPS2PXzLgcVMcWzMeMZOPDPBAGWXwLsLVBqJQOw0OaE+xgnKaNq7Q5JBX
aq9lGFHay0tuWQgkAhy0gQKBgAjlMq5s/F5i+QO4f1lK2lqoOkRcKtIhxfdJTYp+
tSnZZd/7UpySisDHBjEbwgeaw+C7mdhMfL9kO9NAyH3JMwsiEw/qPbUMH9pI5myx
kUQ20+mrthBp3+Uk86jXj7OwqAm8XWFiyrXbTgrpqywFPVtBw2vRR+o5LU+nX0kJ
etghAoGBAM9igw4mxe7UdfWAjFrApkk3htIs6LijoOa90T487+/dJ4hX6ITr1DEZ
ckj17AAPMwtqmRz2cLrywmS/+VF9c/SKJ1Rlj5DZii6jmqzlUma7v+dA3ABHFO0L
Rk4Dto8pfkOUSQpi/AIAl4nU/Bd8va1M4QwD9JU7lTBqXFEaEI6J
-----END RSA PRIVATE KEY-----`),
			&key,
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := ReadRSAPrivateKey(tt.pem)
			if (err != nil) != tt.wantErr {
				t.Errorf("ReadRSAPrivateKey() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("ReadRSAPrivateKey() = %v, exponent = %#v, primes = %#v, want %v, exponent = %#v, primes = %#v", got, got.D.Bytes(), len(got.Primes), tt.want, tt.want.D.Bytes(), len(tt.want.Primes))
			}
		})
	}
}
